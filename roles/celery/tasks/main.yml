# Common tasks to set up Celery for server & workers

- name: Ensure the folder structure for Celery code exists
  file:
    path: '{{ item }}'
    state: directory
    owner: '{{ celery_user }}'
    mode: 0755
  with_items:
    - '{{ celery_dir }}'
    - '{{ celery_state_dir }}'
    - '{{ celery_log_dir }}'
  become: yes

- name: Celery | List celery state
  become: yes
  find:
    paths: '{{ celery_state_dir }}'
    patterns: '*'
  register: celery_state_files

- name: Celery | Checkout repository
  become: yes
  become_user: '{{ celery_user }}'
  git:
    clone: yes
    dest: '{{ celery_checkout }}'
    repo: '{{ celery_git_repo }}'
    version: '{{ celery_git_branch }}'
    update: yes
    force: yes
  notify:
    - clean celery state
    - restart experiment runner

- name: Celery | Install python packages
  become: yes
  become_user: '{{ celery_user }}'
  pip:
    requirements: '{{ celery_checkout }}/requirements/base.txt'
    state: present
    virtualenv: '{{ celery_virtualenv }}'
  become_flags: "-H"
  notify:
    - clean celery state
    - restart experiment runner

- name: Celery | FCWS configuration
  become: yes  # Because the celery_user may not be in the nginx_group
  template:
    src: '{{ item }}.j2'
    dest: '{{ celery_checkout }}/fcws/{{ item }}'
    mode: 0640
    owner: '{{ celery_user }}'
    group: '{{ nginx_group }}'
  with_items:
    - config.json
  notify:
    - restart experiment runner

- name: Install Celery service
  become: yes
  block:
    - name: Celery | Systemd service definition
      template:
        src: 'celery.service.j2'
        dest: '/etc/systemd/system/{{ celery_service_name }}.service'
        mode: 0644
      notify:
        - reload systemd
        - restart celery

    - name: Celery | Systemd app configuration
      template:
        src: celery-default.j2
        dest: /etc/default/{{ celery_service_name }}
        mode: 0644
      notify:
        - reload systemd
        - restart celery

    - name: Celery | Start service
      # TODO: Make this an always-run notify of 'start celery' handler?
      service:
        name: '{{ celery_service_name }}'
        enabled: yes
        state: started
